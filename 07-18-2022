This weeks LeetCode Weekly Challenge, 1182. Shortest Distance to Target Color, was pretty fun. For once, my intuition was pretty spot on: I recognized the number of queries could equal n, the number of inputs. As such, it seemed to make the most sense to simply precompute the entire input, so queries were simple o(1) lookups. I was also correct that the way to do this was to simply createw 3 parallel arrays over the target space, one for each color. Actually, as the colors are listed as the inputs, it was easier to make c arrays, generalizing for c number of colors. That way, the input color could be used as the index to the individual colors processed input. Kinda neat that it was EASIER to make the problem workable for C arbitraty colors. Hard coding array names would have required a bunch more if statements. I also really liked my methods for filling in the arrays: soring the inputs into buckets (added in order by processing the first array), manually filling in the front and back of the substructures, then using a neat index trick involving rounding to quickly fill in the spaces in between, two at a time rather than one by one. Hard to figure out the exact big O for that trick. I was quite pleased that my answer very closely matched the listed answer, and my double counting method seems unique. Alas, not extremely optimized, as I was only running middle of the pack. Anyhow, it felt good that I was able to nail it pretty much in one go. 
